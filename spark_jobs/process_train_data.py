# spark_jobs/process_train_data.py

from pyspark.sql import SparkSession
from pyspark.sql.functions import from_json, col, current_timestamp, udf
from pyspark.sql.types import StructType, StructField, StringType, IntegerType, TimestampType
import uuid
import logging
import os

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- Spark Session Configuration ---
# Packages needed for Kafka and Cassandra
SPARK_PACKAGES = "org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.0,com.datastax.spark:spark-cassandra-connector_2.12:3.5.0"

spark = SparkSession.builder \
    .appName("KafkaToCassandraTrainingIngestion") \
    .config("spark.jars.packages", SPARK_PACKAGES) \
    .config("spark.cassandra.connection.host", "cassandra") \
    .getOrCreate()

spark.sparkContext.setLogLevel("WARN") # Keep Spark's internal logs concise
logger.info("Spark Session for Kafka to Cassandra Training Data Ingestion created.")

# --- Configuration Variables ---
KAFKA_BOOTSTRAP_SERVERS = "kafka:29092"
KAFKA_SOURCE_TOPIC = "raw_train_data" # Input topic for raw training data
CASSANDRA_KEYSPACE = "my_project_keyspace"
CASSANDRA_TABLE = "raw_train_data" # Your existing training data table in Cassandra

# --- Define Schema for Incoming Raw Data from Kafka ---
# This schema should match the structure of your incoming JSON data
# and the schema of your Cassandra raw_train_data table.
# The 'id' field will be generated by the producer API (app.py)
raw_data_kafka_schema = StructType([
    StructField("id", StringType(), True),         # UUID generated by producer
    StructField("comment", StringType(), True),
    StructField("n_star", IntegerType(), True),
    StructField("date_time", StringType(), True), # Comes as string, will be cast to TimestampType
    StructField("label", StringType(), True),
])

logger.info(f"Reading stream from Kafka topic: {KAFKA_SOURCE_TOPIC}")

# Read data from Kafka (raw_train_data topic)
kafka_df = spark \
    .readStream \
    .format("kafka") \
    .option("kafka.bootstrap.servers", KAFKA_BOOTSTRAP_SERVERS) \
    .option("subscribe", KAFKA_SOURCE_TOPIC) \
    .option("startingOffsets", "latest") \
    .load()

# Parse the JSON 'value' from Kafka, cast date_time to Timestamp, add ingestion_timestamp
parsed_df = kafka_df.selectExpr("CAST(value AS STRING)") \
    .select(from_json(col("value"), raw_data_kafka_schema).alias("data")) \
    .select("data.*") \
    .withColumn("date_time", col("date_time").cast(TimestampType())) \
    .withColumn("ingestion_timestamp", current_timestamp()) # Timestamp when Spark ingested it

logger.info("Parsed DataFrame schema for Cassandra ingestion:")
parsed_df.printSchema()

logger.info(f"Writing parsed data to Cassandra: {CASSANDRA_KEYSPACE}.{CASSANDRA_TABLE}")

# Write to Cassandra using 'append' mode.
# Cassandra handles deduplication based on the Primary Key ('id' column).
# If a record with the same ID is sent, it will be upserted (updated if exists, inserted if new).
query_cassandra_sink = parsed_df.writeStream \
    .format("org.apache.spark.sql.cassandra") \
    .options(table=CASSANDRA_TABLE, keyspace=CASSANDRA_KEYSPACE) \
    .option("checkpointLocation", os.path.join("/tmp/spark/checkpoints", KAFKA_SOURCE_TOPIC + "_to_cassandra")) \
    .trigger(processingTime="10 seconds") \
    .start()

logger.info("Spark Structured Streaming query for Kafka to Cassandra ingestion started.")

# Await termination of the query to keep the script running
query_cassandra_sink.awaitTermination()

spark.stop()
logger.info("Spark Session stopped.")